// Buttons /////////////////////////////////////////////////////////

button,
input[type="reset"],
input[type="button"],
input[type="submit"],
input[type="image"],
.btn {
  display: inline-block;
  
  .font-size(14);
 
  max-width: 100%;
  height: @blh;
  line-height: (@blh - (@controlsborderwidth * 2));
  
  padding: 0 8px;
  border: @controlsborderwidth solid @controlsbordercolor;
  border-radius: @controlsroundness;
  margin: 0;
  
  background: @controlsbackground;
  .transition(~'border-color 0.2s, background-color 0.2s');
  
  text-align: center;
  white-space: nowrap;
  vertical-align: top;
  
  cursor: pointer;

  &,
  &:visited,
  &:hover {
    color: @textcolor;
    
    & when (luma(@controlsbackground) < 64%) {
      color: @white;
    }
  }
  
  &:focus,
  &:hover {
    outline: none;
    text-decoration: none;
    background: darken(@controlsbackground, 5%);
  }
  
  & when (@controlsdepth) {
    border-bottom-color: darken(@controlsbordercolor, 10%);
    
    &:focus,
    &:hover {
      border-color: darken(@controlsbackground, 5%);
      border-bottom-color: darken(@controlsbordercolor, 15%);
    }
    
    &:active {
      border-color: darken(@controlsbackground, 5%);
      border-top-color: darken(@controlsbordercolor, 15%);
      line-height: (@blh);
    }
  }
  
  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    cursor: not-allowed;
    pointer-events: none;
    opacity: 0.6;
  }
}

// Sizing ----------------------------------------------------------

.btn-small() {
  .font-size(11);
  height: @smallsize;
  line-height: (@smallsize - (@controlsborderwidth * 2));
  padding: 0 6px;
  
  &:active {
    line-height: @smallsize;  
  }
}

.btn-base() {
  .font-size(14);
  height: @blh;
  line-height: (@blh - (@controlsborderwidth * 2));
  padding: 0 8px;
  
  &:active {
    line-height: @blh;  
  }
}

.btn-large() {
  .font-size(14);
  height: @largesize;
  line-height: (@largesize - (@controlsborderwidth * 2));
  padding: 0 10px;
  
  &:active {
    line-height: @largesize;  
  }
}

.btn-xlarge() {
  .font-size(16);
  height: @xlargesize;
  line-height: (@xlargesize - (@controlsborderwidth * 2));
  padding: 0 14px;
  
  &:active {
    line-height: @xlargesize;  
  }
}

.btn-size(@size) {
  .font-size(@size);
  height: 2em;
  line-height: 1.85em;
  padding: 0 1em 0.15em;
  
  &:active {
    border-top-width: (@controlsborderwidth * 2);
  }
}

// Colours ---------------------------------------------------------

.btn-primary() {
  .btn-color(@basecolor);
}

.btn-alert() {
  .btn-color(@alertcolor);
}

.btn-error() {
  .btn-color(@errorcolor);
}

.btn-info() {
  .btn-color(@infocolor);
}

.btn-success() {
  .btn-color(@successcolor);
}

.btn-warning() {
  .btn-color(@warningcolor);
}

.btn-inverse() {
  .btn-color(@inversecolor);
}

.btn-color(@thiscolor) {
  background-color: @thiscolor;
  border-color: @thiscolor;
  & when (@controlsdepth) {
    border-bottom-color: darken(@thiscolor, 15%);
  }
  
  &,
  &:visited,
  &:hover {
    color: contrast(@thiscolor, darken(@thiscolor, 40%), @white, 64%);
  }
  
  &:focus,
  &:hover {
    .colors() when (luma(@thiscolor) < 64%) {
      background-color: desaturate(darken(@thiscolor, 5%), 8%);
      border-color:     desaturate(darken(@thiscolor, 5%), 8%);      
      & when (@controlsdepth) {
        border-bottom-color: darken(@thiscolor, 20%);
      }
    }
    .colors() when (luma(@thiscolor) > 64%) {
      background-color: desaturate(darken(@thiscolor, 5%), 5%);
      border-color:     desaturate(darken(@thiscolor, 5%), 5%);
      & when (@controlsdepth) {
        border-bottom-color: darken(@thiscolor, 20%);
      }
    }
    .colors();
  }
  
  &:active {
    .colors() when (luma(@thiscolor) < 64%) {
      background-color: desaturate(darken(@thiscolor, 5%), 8%);
      border-color:     desaturate(darken(@thiscolor, 5%), 8%);      
      & when (@controlsdepth) {
        border-top-color: darken(@thiscolor, 20%);
      }
    }
    .colors() when (luma(@thiscolor) > 64%) {
      background-color: desaturate(darken(@thiscolor, 5%), 5%);
      border-color:     desaturate(darken(@thiscolor, 5%), 5%);
      & when (@controlsdepth) {
        border-top-color: darken(@thiscolor, 20%);
      }
    }
    .colors();
  }
}