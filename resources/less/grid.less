// Grid ////////////////////////////////////////////////////////////
    
//  A Grid System for cutLESS
//  by Jason Hibbs
//  hello@jasonhibbs.co.uk



// Useful Mixins ---------------------------------------------------

  // .column-reset() brutally strips a column of its column-ness
  // Use .margin-x(0) and/or .padding-x(0) if you only need to reset these

  .column-reset(@amount: 0) {
    .margin-x(@amount);       // Remove margin only on the x-axis
    .padding-x(@amount);      // Remove padding only on the x-axis
    width: auto;              // Default width
    float: none;              // Remove float
  }
  
  // Nudge column by fraction of the grid
  // .nudge-column(-1/4) will move a column by { left: -25%; }
  
  .nudge-column(@distance: 1/12) {
    position: relative; // Keeps the column in the flow
    
    // Protect non-columned layouts
    @media (min-width: 600px) {
      left: percentage(@distance);
    }
  }





// Layout (Grid Container) -----------------------------------------


  // class="layout" -----------------------------
  // Use only "layout" if you’re more confident than me
  
  .layout {
  
    // All layouts are liquid before the first breakpoint
    // To give silly little devices a fighting chance
    
    width: 93.75%;      // 300 / 320 = 93.75%
    position: relative; // For nudging
    .margin-x(auto);    // Centre layout
    &:extend(.clearfix all);        // Columns are floated
    
    
    // class="fixed layout" --------------------
    // For when you’ve designed for each breakpoint
    
    &.fixed,
    .fixed & {
      @media (min-width: 480px) {
        width: @480width;
      }
      
      @media (min-width: 600px) {
        width: @600width;
      }
      
      @media (min-width: 768px) {
        width: @768width;
      }
      
      @media (min-width: 992px) {
        width: @992width;
      }
      
      @media (min-width: 1382px) {
        width: @1382width;
      }
    }
    
    
    // class="liquid layout" -------------------
    // For when you’re not ready to go full-liquid
    
    &.liquid,
    .liquid & {
      @media (min-width: 480px) {
        width: percentage(@480width / 480);
      }
      
      @media (min-width: 600px) {
        width: percentage(@600width / 600);
      }
      
      @media (min-width: 768px) {
        width: percentage(@768width / 768);
      }
      
      @media (min-width: 992px) {
        width: percentage(@992width / 992);
      }
      
      @media (min-width: 1382px) {
        width: percentage(@1382width / 1382);
      }
    }
  }
  
  

// Column Mixin ----------------------------------------------------

  
  .column(@fraction: 1/1) {

    // This is redefined at each breakpoint,
    // and if used, needs to be used at successive breakpoints, too.
    

    // Some calculations -----------------------
    @gridbits: (960 / @gutterwidth);
    // Assume 960 for non-responsive layouts
    
    @gutterbits: (@gridwidth / @gridbits);
    // @gridbits as a percentage
  
    @portion: (1 / @fraction);
    // How many columns could I fit in a row given @fraction
    // e.g. Sixteen 1/16 columns, one and a half 2/3 columns, half of a 2/1 columns…
    
    // This is the complicated bit
    @columnwidth: @gutterbits * ((@gridbits - @portion) * @fraction);
    // e.g.       (100% / 48) * ((48        - 2)        * 1/2)        = 47.916666667%
  
    float: left;
    width: @columnwidth;
    .margin-x(@gutterbits * 0.5); 
  }




  .column-all(@fraction: 1/1) {
  
    // This will basically take care of itself,
    // So long as you have one of those good layouts,
    // where the good design is good.
    
    // Some calculations -----------------------
    
    @gridbits: (320 / @gutterwidth);
    // How many gutters could fit in the current layout?
    
    @gutterbits: (@gridwidth / @gridbits);
    // @gridbits as a percentage
    
    @portion: (1 / @fraction);
    // How many columns could I fit in a row given @fraction
    // e.g. Sixteen 1/16 columns, one and a half 2/3 columns, half of a 2/1 columns…
    
    // This is the complicated bit
    @columnwidth: @gutterbits * ((@gridbits - @portion) * @fraction);
    // e.g.       (100% / 48) * ((48        - 2)        * 1/2)        = 47.916666667%
    
    
    // Finishing -------------------------------
    
    .margin-x(@gutterbits * 0.5);
    // Give half a gutter to each side
    
    .box-sizing(border-box);
    // Make your content pretty without worrying about breaking the layout

    
    // Breakpoints -----------------------------
    
    @media (min-width: 480px) {
      
      // Because gutters remain pretty constant over breakpoints
      // @gridbits needs to be set in context to recalculate everything else
      @gridbits: (@480width / @gutterwidth);
      
      .margin-x(@gutterbits * 0.5); // Recalculated for current context
      
    }
    
    
    @media (min-width: 600px) {
      
      @gridbits: (@600width / @gutterwidth);
      
      // Now we’re talking columns…
      float: left;
      width: @columnwidth;
      .margin-x(@gutterbits * 0.5);
      
    }
    

    @media (min-width: 768px) {
      
      @gridbits: (@768width / @gutterwidth);
      
      width: @columnwidth;
      .margin-x(@gutterbits * 0.5);
      
    }
    

    @media (min-width: 992px) {
      
      @gridbits: (@992width / @gutterwidth);
      
      width: @columnwidth;
      .margin-x(@gutterbits * 0.5);
      
    }
    

    @media (min-width: 1382px) {
      
      @gridbits: (@1382width / @gutterwidth);
      
      width: @columnwidth;
      .margin-x(@gutterbits * 0.5);
      
    }

  }
  
  
// The End ---------------------------------------------------------